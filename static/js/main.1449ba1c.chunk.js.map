{"version":3,"sources":["../../src/index.jsx","App.js","index.js"],"names":["TextMarker","transforms","x","y","color","fontFamily","i","id","label","opacity","pointer","size","labelRef","useRef","useState","visible","setVisible","useEffect","first","second","allTexts","document","querySelectorAll","thisBox","current","getBBox","text","otherBox","getAttribute","width","height","tx","ty","React","ref","fill","fontSize","dx","dy","fillOpacity","strokeOpacity","textMarker","element","map","key","sceneSettings","cubeRange","cubeZoffset","dataXoffset","dataYoffset","dataZoffset","paperXrange","window","innerWidth","paperYrange","innerHeight","sceneOptions","paper","xyPlane","sceneEdges","crossLines","emptySceneOptions","App","zoom","setZoom","rotateX","setRotateX","rotateY","setRotateY","viewSettings","camTx","camTy","camTz","cubeRx","cubeRy","cubeRz","camZoom","canvasToViewRatio","defaultCamZoffset","defaultCamOrientation","points","renderScene","data","catalog","star","type","location","z","push","name","symbol","style","onWheel","e","destZoom","deltaY","onMouseMove","clientX","clientY","container","xRange","yRange","plugins","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1449ba1c.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n\nconst collides = (first, second) => {\n  return first.x < second.x + second.width &&\n         first.x + first.width > second.x &&\n         first.y < second.y + second.height &&\n         first.y + first.height > second.y\n}\n\nconst TextMarker = ({\n    x,\n    y,\n    color,\n    fontFamily,\n    i,\n    id,\n    label,\n    opacity,\n    pointer,\n    size,\n    transforms,\n  }) => {\n  const labelRef = useRef()\n  opacity ||= 1\n  size ||= 16\n  pointer ||= 'â€¢'\n\n  const [ visible, setVisible ] = useState(false)\n\n  useEffect(() => {\n    const allTexts = document.querySelectorAll('text')\n    let thisBox = labelRef.current.getBBox()\n    for(let text of allTexts) {\n      if (labelRef.current === text) {\n        setVisible(true)\n        return\n      }\n      let otherBox = text.getBBox()\n      let opacity = text.getAttribute('opacity')\n      if (opacity != 0 && collides(thisBox, otherBox)) {\n        setVisible(false)\n        return\n      }\n    }\n    setVisible(true)\n  }, [x,y])\n\n  const tx = transforms.tx(x)\n  const ty = transforms.ty(y)\n\n  return (\n    <text\n      ref={labelRef}\n      x={tx}\n      y={ty}\n      fill={color}\n      fontSize={size}\n      fontFamily={fontFamily}\n      id={`${id}-${i}`}\n    >\n      <tspan dx={-size/4} dy={size/2}>{pointer}</tspan>\n      {' '}\n      <tspan\n        fillOpacity={visible ? opacity : 0}\n        strokeOpacity={visible ? opacity : 0}\n      >\n        {label}\n      </tspan>\n    </text>\n  )\n}\n\nconst textMarkerPlugin = {\n  textMarker: (element, transforms) => {\n    const {\n      size,\n      color,\n      opacity,\n      id,\n      label,\n      pointer,\n      fontFamily,\n    } = element\n    return element.x.map((x, i) => (\n      <TextMarker\n        {...{\n          x,\n          y: element.y[i],\n          color,\n          fontFamily,\n          i,\n          id,\n          label,\n          opacity,\n          pointer,\n          size,\n          transforms,\n        }}\n        key={`${id}-${i}`}\n      />\n    ))\n  }\n}\n\nexport default textMarkerPlugin\n","import React, { useState } from 'react'\nimport BareMinimum2d from 'bare-minimum-2d'\nimport renderScene from '@mithi/bare-minimum-3d'\nimport catalog from './catalog.json'\nimport textMarker from 'bare-minimum-text-marker'\n\nconst sceneSettings = {\n  cubeRange: 20,\n  cubeZoffset: 0,\n  dataXoffset: 0,\n  dataYoffset: 0,\n  dataZoffset: .25,\n  paperXrange: window.innerWidth,\n  paperYrange: window.innerHeight,\n}\n\nconst sceneOptions = {\n  paper: false,\n  xyPlane: false,\n  sceneEdges: { color: \"#607D8B\", opacity: 1 },\n  crossLines: false,\n}\n\nconst emptySceneOptions = {\n  paper: false,\n  xyPlane: false,\n  sceneEdges: false,\n  crossLines: false,\n}\n\nfunction App() {\n  const [zoom, setZoom] = useState(2);\n  const [rotateX, setRotateX] = useState(0);\n  const [rotateY, setRotateY] = useState(0);\n\n  const viewSettings = {\n    camTx: 0,\n    camTy: 0,\n    camTz: 0,\n    cubeRx: rotateX,\n    cubeRy: 0,\n    cubeRz: rotateY,\n    camZoom: zoom,\n    canvasToViewRatio: 300,\n    defaultCamZoffset: 5,\n    defaultCamOrientation: \"z-forward-x-right\",\n  }\n\n  let { data } = renderScene(\n    viewSettings,\n    sceneSettings,\n    sceneOptions,\n    [],\n  )\n\n  let points = [\n    data[0]\n  ]\n  for (let star of catalog) {\n    let { data } = renderScene(\n      viewSettings,\n      sceneSettings,\n      emptySceneOptions,\n      [{\n        type: 'points',\n        x: [star.location.x],\n        y: [star.location.y],\n        z: [star.location.z],\n      }],\n    )\n\n    points.push({\n      ...data[0],\n      label: star.name,\n      id: star.name,\n      pointer: star.symbol ? star.symbol : null,\n      type: 'textMarker',\n      opacity: 1,\n      color: 'white',\n    })\n  }\n\n  return (\n    <div\n      style={{ width: '100%', height: window.innerHeight }}\n      onWheel={(e) => {\n        let destZoom = zoom + (e.deltaY/100)\n        if (destZoom > 0) {\n          setZoom(destZoom)\n        }\n      }}\n      onMouseMove={(e) => {\n        setRotateY(-e.clientX/3)\n        setRotateX(e.clientY/3)\n      }}\n    >\n      <BareMinimum2d\n        container={{\n          color: 'black',\n          opacity: 'black',\n          xRange: 1000,\n          yRange: 2000\n        }}\n        data={points}\n        plugins={[textMarker]}\n      />\n    </div>\n  )\n}\n\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}